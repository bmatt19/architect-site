"use client"

import { useState } from "react"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Edit, Save, X, Upload, Plus, Trash } from "lucide-react"

// Initial project data
const initialProject = {
  id: 1,
  title: "Catalina Mountain Estate",
  image: "/placeholder.svg?height=600&width=800",
  description: "8,500 sq ft contemporary desert mansion with panoramic mountain views",
  location: "Catalina Foothills, Tucson, AZ",
  size: "8,500 sq ft",
  completed: "2023",
  style: "Contemporary Desert",
  features: [
    "Floor-to-ceiling windows with panoramic mountain views",
    "Infinity edge pool overlooking the Tucson valley",
    "Integrated smart home technology throughout",
    "Sustainable design with solar power integration",
  ],
  gallery: [
    {
      id: 1,
      image: "/placeholder.svg?height=600&width=800",
      caption: "Exterior view",
    },
    {
      id: 2,
      image: "/placeholder.svg?height=600&width=800",
      caption: "Interior living room",
    },
    {
      id: 3,
      image: "/placeholder.svg?height=600&width=800",
      caption: "Pool and patio",
    },
  ],
}

type GalleryImage = {
  id: number
  image: string
  caption: string
}

type Project = {
  id: number
  title: string
  image: string
  description: string
  location: string
  size: string
  completed: string
  style: string
  features: string[]
  gallery: GalleryImage[]
}

export default function PortfolioManagement() {
  const [project, setProject] = useState<Project>(initialProject)
  const [isEditing, setIsEditing] = useState(false)
  const [editedProject, setEditedProject] = useState<Project>(initialProject)
  const [newFeature, setNewFeature] = useState("")
  const [successMessage, setSuccessMessage] = useState("")
  const [newGalleryImage, setNewGalleryImage] = useState<Omit<GalleryImage, "id">>({
    image: "/placeholder.svg?height=600&width=800",
    caption: "",
  })

  const handleSave = () => {
    setProject(editedProject)
    setIsEditing(false)
    showSuccessMessage("Project updated successfully!")
  }

  const handleCancel = () => {
    setEditedProject(project)
    setIsEditing(false)
  }

  const handleAddFeature = () => {
    if (newFeature.trim()) {
      setEditedProject({
        ...editedProject,
        features: [...editedProject.features, newFeature.trim()],
      })
      setNewFeature("")
    }
  }

  const handleRemoveFeature = (index: number) => {
    setEditedProject({
      ...editedProject,
      features: editedProject.features.filter((_, i) => i !== index),
    })
  }

  const handleAddGalleryImage = () => {
    if (newGalleryImage.caption.trim() && newGalleryImage.image) {
      const newId = Math.max(...editedProject.gallery.map((img) => img.id), 0) + 1
      setEditedProject({
        ...editedProject,
        gallery: [...editedProject.gallery, { ...newGalleryImage, id: newId }],
      })
      setNewGalleryImage({
        image: "/placeholder.svg?height=600&width=800",
        caption: "",
      })
    }
  }

  const handleRemoveGalleryImage = (id: number) => {
    setEditedProject({
      ...editedProject,
      gallery: editedProject.gallery.filter((img) => img.id !== id),
    })
  }

  const showSuccessMessage = (message: string) => {
    setSuccessMessage(message)
    setTimeout(() => {
      setSuccessMessage("")
    }, 3000)
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Portfolio Management</h1>
        {!isEditing ? (
          <Button onClick={() => setIsEditing(true)} className="bg-primary hover:bg-primary/90">
            <Edit className="h-5 w-5 mr-2" />
            Edit Project
          </Button>
        ) : (
          <div className="flex gap-2">
            <Button onClick={handleSave} className="bg-primary hover:bg-primary/90">
              <Save className="h-5 w-5 mr-2" />
              Save Changes
            </Button>
            <Button onClick={handleCancel} variant="outline">
              <X className="h-5 w-5 mr-2" />
              Cancel
            </Button>
          </div>
        )}
      </div>

      {successMessage && (
        <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">{successMessage}</div>
      )}

      <Card>
        <CardContent className="p-6">
          {isEditing ? (
            <div className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="title">Project Title</Label>
                    <Input
                      id="title"
                      value={editedProject.title}
                      onChange={(e) => setEditedProject({ ...editedProject, title: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="image">Main Image URL</Label>
                    <div className="flex gap-2">
                      <Input
                        id="image"
                        value={editedProject.image}
                        onChange={(e) => setEditedProject({ ...editedProject, image: e.target.value })}
                      />
                      <Button variant="outline" className="flex-shrink-0">
                        <Upload className="h-4 w-4 mr-2" />
                        Upload
                      </Button>
                    </div>
                  </div>
                  <div>
                    <Label htmlFor="description">Description</Label>
                    <Textarea
                      id="description"
                      value={editedProject.description}
                      onChange={(e) => setEditedProject({ ...editedProject, description: e.target.value })}
                      rows={3}
                    />
                  </div>
                </div>
                <div className="relative aspect-[16/9] rounded-lg overflow-hidden border">
                  <Image
                    src={editedProject.image || "/placeholder.svg?height=600&width=800"}
                    alt="Project preview"
                    fill
                    className="object-cover"
                  />
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={editedProject.location}
                    onChange={(e) => setEditedProject({ ...editedProject, location: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="size">Size</Label>
                  <Input
                    id="size"
                    value={editedProject.size}
                    onChange={(e) => setEditedProject({ ...editedProject, size: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="completed">Completed</Label>
                  <Input
                    id="completed"
                    value={editedProject.completed}
                    onChange={(e) => setEditedProject({ ...editedProject, completed: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="style">Style</Label>
                  <Input
                    id="style"
                    value={editedProject.style}
                    onChange={(e) => setEditedProject({ ...editedProject, style: e.target.value })}
                  />
                </div>
              </div>

              <div>
                <Label>Features</Label>
                <div className="space-y-2 mt-2">
                  {editedProject.features.map((feature, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <Input value={feature} readOnly className="flex-1" />
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => handleRemoveFeature(index)}
                        className="text-red-500"
                      >
                        <Trash className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="Add new feature"
                      value={newFeature}
                      onChange={(e) => setNewFeature(e.target.value)}
                      className="flex-1"
                    />
                    <Button variant="outline" onClick={handleAddFeature}>
                      <Plus className="h-4 w-4 mr-2" />
                      Add
                    </Button>
                  </div>
                </div>
              </div>

              <div>
                <Label>Gallery Images</Label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
                  {editedProject.gallery.map((img) => (
                    <div key={img.id} className="relative border rounded-md overflow-hidden">
                      <div className="aspect-[4/3] relative">
                        <Image src={img.image || "/placeholder.svg"} alt={img.caption} fill className="object-cover" />
                      </div>
                      <div className="p-2 bg-white">
                        <p className="text-sm truncate">{img.caption}</p>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleRemoveGalleryImage(img.id)}
                          className="mt-2 w-full text-red-500"
                        >
                          <Trash className="h-4 w-4 mr-2" />
                          Remove
                        </Button>
                      </div>
                    </div>
                  ))}
                  <div className="border rounded-md p-4">
                    <div className="space-y-2">
                      <Label htmlFor="new-image">Image URL</Label>
                      <div className="flex gap-2">
                        <Input
                          id="new-image"
                          value={newGalleryImage.image}
                          onChange={(e) => setNewGalleryImage({ ...newGalleryImage, image: e.target.value })}
                        />
                        <Button variant="outline" className="flex-shrink-0">
                          <Upload className="h-4 w-4 mr-2" />
                          Upload
                        </Button>
                      </div>
                      <Label htmlFor="new-caption">Caption</Label>
                      <Input
                        id="new-caption"
                        value={newGalleryImage.caption}
                        onChange={(e) => setNewGalleryImage({ ...newGalleryImage, caption: e.target.value })}
                        placeholder="Image caption"
                      />
                      <Button variant="outline" onClick={handleAddGalleryImage} className="w-full mt-2">
                        <Plus className="h-4 w-4 mr-2" />
                        Add Image
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              <div className="relative aspect-[16/9] w-full rounded-lg overflow-hidden">
                <Image
                  src={project.image || "/placeholder.svg?height=900&width=1600"}
                  alt={project.title}
                  fill
                  className="object-cover"
                />
              </div>

              <div>
                <h2 className="text-2xl font-bold">{project.title}</h2>
                <p className="text-lg text-muted-foreground mt-2">{project.description}</p>
              </div>

              <div className="grid md:grid-cols-2 gap-8">
                <div>
                  <h3 className="text-lg font-semibold mb-3">Project Details</h3>
                  <ul className="space-y-2">
                    <li className="flex items-start gap-2">
                      <span className="text-primary font-medium">Location:</span>
                      <span>{project.location}</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-primary font-medium">Size:</span>
                      <span>{project.size}</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-primary font-medium">Completed:</span>
                      <span>{project.completed}</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <span className="text-primary font-medium">Style:</span>
                      <span>{project.style}</span>
                    </li>
                  </ul>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-3">Features</h3>
                  <ul className="space-y-2">
                    {project.features.map((feature, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-primary mt-1 flex-shrink-0"
                        >
                          <polyline points="20 6 9 17 4 12" />
                        </svg>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold mb-3">Gallery</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {project.gallery.map((img) => (
                    <div key={img.id} className="relative border rounded-md overflow-hidden">
                      <div className="aspect-[4/3] relative">
                        <Image src={img.image || "/placeholder.svg"} alt={img.caption} fill className="object-cover" />
                      </div>
                      <div className="p-2 bg-white">
                        <p className="text-sm truncate">{img.caption}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

"use client"

import type React from "react"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { LogOut, Home, ImageIcon } from "lucide-react"

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    // Check if user is authenticated
    const authStatus = localStorage.getItem("isAuthenticated")
    if (authStatus !== "true") {
      router.push("/login")
    } else {
      setIsAuthenticated(true)
    }
    setIsLoading(false)
  }, [router])

  const handleLogout = () => {
    localStorage.removeItem("isAuthenticated")
    router.push("/login")
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-desert-light">
        <div className="text-center">Loading...</div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return null
  }

  return (
    <div className="min-h-screen bg-desert-light flex flex-col">
      <header className="bg-desert-dark text-white">
        <div className="container mx-auto py-4 px-4 flex justify-between items-center">
          <Link href="/admin/portfolio" className="flex items-center gap-2 text-xl font-bold">
            <span className="text-primary">MATTINGLY</span> ADMIN
          </Link>
          <div className="flex items-center gap-4">
            <Button variant="ghost" className="text-white" onClick={handleLogout}>
              <LogOut className="h-5 w-5 mr-2" />
              Logout
            </Button>
          </div>
        </div>
      </header>
      <div className="flex flex-1">
        <aside className="w-64 bg-desert p-4 hidden md:block">
          <nav className="space-y-2">
            <Link href="/">
              <Button variant="ghost" className="w-full justify-start">
                <Home className="h-5 w-5 mr-2" />
                View Website
              </Button>
            </Link>
            <Link href="/admin/portfolio">
              <Button variant="ghost" className="w-full justify-start">
                <ImageIcon className="h-5 w-5 mr-2" />
                Portfolio Management
              </Button>
            </Link>
          </nav>
        </aside>
        <main className="flex-1 p-6">{children}</main>
      </div>
    </div>
  )
}

import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { name, email, phone, message } = body

    // Validate the data
    if (!name || !email || !message) {
      return NextResponse.json({ error: "Name, email, and message are required" }, { status: 400 })
    }

    // In a real application, you would:
    // 1. Send an email using a service like SendGrid, Mailgun, etc.
    // 2. Store the contact request in a database
    // 3. Possibly trigger a notification

    console.log("Contact form submission:", { name, email, phone, message })

    // For now, we'll just return a success response
    return NextResponse.json({ success: true, message: "Contact form submitted successfully" }, { status: 200 })
  } catch (error) {
    console.error("Error processing contact form:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { AlertCircle } from "lucide-react"

export default function LoginPage() {
  const [username, setUsername] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")

    // This is a simple mock authentication
    // In a real application, you would validate against a backend
    setTimeout(() => {
      if (username === "admin" && password === "password") {
        // Store authentication state
        localStorage.setItem("isAuthenticated", "true")
        // Redirect to admin dashboard
        router.push("/admin/portfolio")
      } else {
        setError("Invalid username or password")
      }
      setIsLoading(false)
    }, 1000)
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-desert-light p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <div className="flex justify-center mb-4">
            <Link href="/" className="flex items-center gap-2 text-xl font-bold">
              <span className="text-primary">MATTINGLY</span> DESIGN INC.
            </Link>
          </div>
          <CardTitle className="text-2xl font-bold text-center">Owner Login</CardTitle>
          <CardDescription className="text-center">
            Enter your credentials to access the portfolio management system
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin}>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg flex items-center gap-2 mb-4">
                <AlertCircle className="h-5 w-5" />
                <span>{error}</span>
              </div>
            )}
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="username">Username</Label>
                <Input
                  id="username"
                  placeholder="Enter your username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input
                  id="password"
                  type="password"
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
            </div>
            <Button className="w-full mt-6 bg-primary hover:bg-primary/90" type="submit" disabled={isLoading}>
              {isLoading ? "Logging in..." : "Login"}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="flex justify-center">
          <Link href="/" className="text-sm text-primary hover:underline">
            Return to homepage
          </Link>
        </CardFooter>
      </Card>
    </div>
  )
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary-foreground: 210 40% 98%;

    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted-foreground: 215.4 16.3% 46.9%;

    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Mattingly Design Inc. - Luxury Architectural Design",
  description:
    "Award-winning architectural design firm creating innovative, sustainable, and beautiful spaces in Southern Arizona.",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

"use client"

import type React from "react"

import { useState } from "react"
import Image from "next/image"
import Link from "next/link"
import { ArrowRight } from "lucide-react"
import { Button } from "@/components/ui/button"

export default function Home() {
  const [formStatus, setFormStatus] = useState<"idle" | "submitting" | "success" | "error">("idle")

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setFormStatus("submitting")

    // Get form data
    const formData = new FormData(e.currentTarget)
    const data = {
      name: formData.get("name"),
      email: formData.get("email"),
      phone: formData.get("phone"),
      message: formData.get("message"),
    }

    try {
      // In a real app, you would send this data to your API route
      // await fetch('/api/contact', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(data),
      // });

      // For now, we'll just simulate a successful submission
      await new Promise((resolve) => setTimeout(resolve, 1000))
      setFormStatus("success")
      e.currentTarget.reset()
    } catch (error) {
      console.error("Error submitting form:", error)
      setFormStatus("error")
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-desert-light">
      <header className="sticky top-0 z-50 w-full border-b bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60">
        <div className="container mx-auto px-4 flex h-20 items-center justify-between">
          <Link href="/" className="flex items-center gap-2 text-xl font-bold">
            <span className="text-primary">MATTINGLY</span> DESIGN INC.
          </Link>
          <nav className="hidden md:flex gap-6 text-sm font-medium">
            <Link href="/" className="transition-colors hover:text-primary">
              Home
            </Link>
            <Link href="#portfolio" className="transition-colors hover:text-primary">
              Custom Projects Portfolio
            </Link>
            <Link href="#contact" className="transition-colors hover:text-primary">
              Contact
            </Link>
          </nav>
          <Button className="hidden md:inline-flex" asChild>
            <Link href="#contact">
              Get in Touch <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
          <Button variant="ghost" size="icon" className="md:hidden">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="h-6 w-6"
            >
              <line x1="4" x2="20" y1="12" y2="12" />
              <line x1="4" x2="20" y1="6" y2="6" />
              <line x1="4" x2="20" y1="18" y2="18" />
            </svg>
          </Button>
        </div>
      </header>

      <main className="flex-1 px-4 py-12 space-y-20">
        {/* Hero */}
        <section className="text-center space-y-4">
          <h1 className="text-4xl font-bold text-primary">Jeremy Mattingly Design LLC</h1>
          <p className="text-lg">Architectural Design Solutions Tailored to You</p>
        </section>

        {/* About */}
        <section className="max-w-3xl mx-auto text-center space-y-4">
          <h2 className="text-2xl font-semibold">About Us</h2>
          <p>
            We specialize in modern architectural design, helping clients bring their vision to life through innovative
            planning, 3D modeling, and detailed project execution.
          </p>
        </section>

        {/* Portfolio */}
        <section id="portfolio" className="max-w-5xl mx-auto">
          <h2 className="text-2xl font-semibold text-center mb-6">Portfolio</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {[1, 2, 3, 4, 5, 6].map((item) => (
              <div key={item} className="border rounded overflow-hidden">
                <div className="relative h-48 w-full">
                  <Image
                    src={`/placeholder.svg?height=400&width=300&text=Project+${item}`}
                    alt={`Project ${item}`}
                    fill
                    className="object-cover"
                  />
                </div>
                <div className="p-4 text-sm">Project {item} description goes here.</div>
              </div>
            ))}
          </div>
        </section>

        {/* Contact */}
        <section id="contact" className="max-w-xl mx-auto space-y-6">
          <h2 className="text-2xl font-semibold text-center">Request a Consultation</h2>

          {formStatus === "success" ? (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
              Thank you for your message! We'll get back to you soon.
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium mb-1">
                    Name
                  </label>
                  <input type="text" id="name" name="name" className="w-full px-3 py-2 border rounded-md" required />
                </div>
                <div>
                  <label htmlFor="email" className="block text-sm font-medium mb-1">
                    Email
                  </label>
                  <input type="email" id="email" name="email" className="w-full px-3 py-2 border rounded-md" required />
                </div>
              </div>
              <div>
                <label htmlFor="phone" className="block text-sm font-medium mb-1">
                  Phone
                </label>
                <input type="tel" id="phone" name="phone" className="w-full px-3 py-2 border rounded-md" />
              </div>
              <div>
                <label htmlFor="message" className="block text-sm font-medium mb-1">
                  Message
                </label>
                <textarea
                  id="message"
                  name="message"
                  rows={4}
                  className="w-full px-3 py-2 border rounded-md resize-none"
                  required
                ></textarea>
              </div>

              {formStatus === "error" && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                  There was an error submitting your message. Please try again.
                </div>
              )}

              <Button type="submit" className="w-full" disabled={formStatus === "submitting"}>
                {formStatus === "submitting" ? "Submitting..." : "Submit Request"}
              </Button>
            </form>
          )}
        </section>
      </main>

      <footer className="bg-desert-dark text-white py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <Link href="/" className="flex items-center gap-2 text-xl font-bold">
                <span className="text-primary">MATTINGLY</span> DESIGN INC.
              </Link>
              <p className="text-sm mt-2">
                © {new Date().getFullYear()} Jeremy Mattingly Design LLC. All rights reserved.
              </p>
            </div>
            <div className="flex gap-4">
              <Link href="/login" className="text-desert-light hover:text-white transition-colors">
                Owner Login
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
)
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
)
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
)
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
)
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
)
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70")

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

"use client"

import { useState } from "react"
import Link from "next/link"
import { X } from "lucide-react"
import { Button } from "@/components/ui/button"

export function MobileMenu() {
  const [isOpen, setIsOpen] = useState(false)

  const toggleMenu = () => {
    setIsOpen(!isOpen)
  }

  const closeMenu = () => {
    setIsOpen(false)
  }

  return (
    <div className="md:hidden">
      <Button variant="ghost" size="icon" onClick={toggleMenu} aria-label="Toggle menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="h-6 w-6"
        >
          <line x1="4" x2="20" y1="12" y2="12" />
          <line x1="4" x2="20" y1="6" y2="6" />
          <line x1="4" x2="20" y1="18" y2="18" />
        </svg>
      </Button>

      {isOpen && (
        <div className="fixed inset-0 z-50 bg-white">
          <div className="container mx-auto px-4 py-4">
            <div className="flex justify-between items-center mb-8">
              <Link href="/" className="flex items-center gap-2 text-xl font-bold" onClick={closeMenu}>
                <span className="text-primary">MATTINGLY</span> DESIGN INC.
              </Link>
              <Button variant="ghost" size="icon" onClick={closeMenu} aria-label="Close menu">
                <X className="h-6 w-6" />
              </Button>
            </div>
            <nav className="flex flex-col gap-4 text-lg">
              <Link href="/" className="py-2 border-b" onClick={closeMenu}>
                Home
              </Link>
              <Link href="#portfolio" className="py-2 border-b" onClick={closeMenu}>
                Custom Projects Portfolio
              </Link>
              <Link href="#contact" className="py-2 border-b" onClick={closeMenu}>
                Contact
              </Link>
              <Link href="/login" className="py-2 border-b" onClick={closeMenu}>
                Owner Login
              </Link>
            </nav>
          </div>
        </div>
      )}
    </div>
  )
}

import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600" viewBox="0 0 800 600">
  <rect width="800" height="600" fill="#E8E0D5"/>
  <text x="400" y="300" font-family="Arial" font-size="24" text-anchor="middle" fill="#6B5B4E">Image Placeholder</text>
</svg>

{
  "extends": "next/core-web-vitals"
}

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

MIT License

Copyright (c) 2023 Mattingly Design Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['placeholder.com'],
  },
};

export default nextConfig;

{
  "name": "mattingly-design-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-label": "^2.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.294.0",
    "next": "14.0.4",
    "react": "^18",
    "react-dom": "^18",
    "tailwind-merge": "^2.1.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

# Mattingly Design Inc. Website

This is the official website for Mattingly Design Inc., a luxury architectural design firm specializing in custom homes in Southern Arizona.

## Features

- Responsive design optimized for all devices
- Project portfolio showcase
- Contact form
- Admin interface for portfolio management
- Authentication system for secure content management

## Tech Stack

- Next.js 14 (App Router)
- TypeScript
- Tailwind CSS
- shadcn/ui components

## Getting Started

### Prerequisites

- Node.js 18.x or higher
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone https://github.com/your-username/mattingly-design-website.git
cd mattingly-design-website

import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#C35831", // Adobe/terracotta red
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "#45B5AA", // Turquoise accent
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "#E8E0D5", // Sandy beige
          foreground: "#6B5B4E", // Darker earth tone
        },
        accent: {
          DEFAULT: "#8A9A5B", // Sage green
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        desert: {
          light: "#F2E9DE", // Light sand
          DEFAULT: "#D9C2A8", // Desert sand
          dark: "#A67C52", // Desert brown
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
